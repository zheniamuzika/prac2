from scipy.optimize import fsolve

def equation(x):
    return 2*x**4 - 8*x**3 - 16*x**2 - 1
solutions = fsolve(equation, [-2, -1, 0, 1, 2], xtol=1e-3)
print("Знайдені розв'язки:")
for solution in solutions:
    print(solution)

def chord_method(f, a, b, tol, max_iter):
    if f(a) * f(b) >= 0:
        return None  

    i = 0
    while abs(b - a) > tol and i < max_iter:
        c = (a * f(b) - b * f(a)) / (f(b) - f(a))  
        if f(c) == 0:
            return c 
        elif f(a) * f(c) < 0:
            b = c  
        else:
            a = c  
        i += 1

    return (a + b) / 2 

def equation(x):
    return 2*x**4 - 8*x**3 - 16*x**2 - 1

a = -3.0  
b = 3.0  
tol = 0.0001  
max_iter = 1000  

root = chord_method(equation, a, b, tol, max_iter)
print("Метод хорд: {}".format(root))
